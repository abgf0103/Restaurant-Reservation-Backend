<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.re.kh.mapper.ReviewMapper">

    <!-- 전체 리뷰 목록 (기본 리뷰 정보) -->
    <select id="selectReview" parameterType="SearchHelper" resultType="Review">
        SELECT
        R.review_id AS reviewId,
        R.user_id AS userId,
        R.store_id AS storeId,
        R.rating,
        R.review_comment AS reviewComment,
        R.created_at AS createdAt,
        R.updated_at AS updatedAt,
        R.LIKE_COUNT AS likeCount, <!-- LIKE 컬럼을 LIKE_COUNT로 변경 -->
        R.username,
        R.RESERVE_ID,
        S.store_name AS storeName,
        U.FILE_ID AS fileId  <!-- USERS 테이블과 조인하여 fileId 가져오기 -->
        FROM review R
        JOIN store S ON R.store_id = S.store_id
        LEFT JOIN USERS U ON U.username = R.username  <!-- USERS 테이블을 LEFT JOIN하여 fileId 가져오기 -->
        <where>
            <if test="searchCode != null and searchCode != ''">
                AND R.store_id = #{searchCode}
            </if>
            <if test="searchKeyword != null and searchKeyword != '' and searchType != null and searchType != ''">
                AND ${searchType} LIKE '%' || #{searchKeyword} || '%'
            </if>
        </where>
        ORDER BY R.review_id DESC
    </select>

    <!-- 리뷰와 파일 정보가 포함된 목록 조회 -->
    <select id="selectReviewsWithFiles" parameterType="SearchHelper" resultType="UploadFile">
        SELECT
        uf.FILE_DIR AS fileDir,
        uf.SAVE_FILE_NAME AS saveFileName,
        uf.id,
        uf.FILE_TARGET
        FROM UPLOAD_FILE uf
        INNER JOIN REVIEW_FILE_MAP rf ON rf.FILE_ID = uf.ID
        INNER JOIN REVIEW r ON r.STORE_ID = rf.STORE_ID
        <where>
            <if test="userId != null">
                AND  rf.USER_ID = #{userId}
            </if>
            <if test="storeId != null">
                AND rf.STORE_ID = #{storeId}
            </if>
            <if test="reserveId != null">
                AND rf.RESERVE_ID = #{reserveId}
            </if>
        </where>
        GROUP BY uf.FILE_DIR, uf.SAVE_FILE_NAME, uf.id, uf.FILE_TARGET
    </select>

    <!-- 리뷰 목록 (사용자별) -->
    <select id="selectReviewsByUserId" parameterType="Long" resultType="Review">
        SELECT
        R.review_id AS reviewId,
        R.user_id AS userId,
        R.store_id AS storeId,
        R.rating,
        R.review_comment AS reviewComment,
        R.created_at AS createdAt,
        R.updated_at AS updatedAt,
        R.username,
        R.LIKE_COUNT AS likeCount, <!-- LIKE 컬럼을 LIKE_COUNT로 변경 -->
        S.store_name AS storeName,
        R.RESERVE_ID
        FROM review R
        LEFT JOIN store S ON R.store_id = S.store_id
        <where>
            AND R.user_id = #{userId}
        </where>
        ORDER BY R.review_id DESC
    </select>

    <!-- 리뷰 목록 카운트 -->
    <select id="countReview" parameterType="SearchHelper" resultType="int">
        SELECT COUNT(*)
        FROM review
        <where>
            <if test="searchCode != null and searchCode != ''">
                AND store_id = #{searchCode}
            </if>
            <if test="searchKeyword != null and searchKeyword != '' and searchType != null and searchType != ''">
                AND ${searchType} LIKE '%' || #{searchKeyword} || '%'
            </if>
        </where>
    </select>

    <!-- 리뷰 저장 -->
    <insert id="reviewSave" parameterType="Review" useGeneratedKeys="true" keyProperty="reviewId" keyColumn="REVIEW_ID">
        INSERT INTO review (user_id, store_id, rating, review_comment, created_at, updated_at, username, reserve_id)
        VALUES (
        #{userId},
        #{storeId},
        #{rating},
        #{reviewComment},
        CURRENT_TIMESTAMP,
        CURRENT_TIMESTAMP,
        #{username}, -- USERNAME 추가
        #{reserveId}
        )
    </insert>

    <insert id="insertFileMap" parameterType="java.util.HashMap">
        INSERT INTO REVIEW_FILE_MAP (USER_ID, FILE_ID, RESERVE_ID, STORE_ID) VALUES (#{userId}, #{fileId}, #{reserveId}, #{storeId})
    </insert>

    <!-- 리뷰 조회 -->
    <select id="reviewInfo" parameterType="Long" resultType="Review">
        SELECT
        review_id AS reviewId
        , user_id AS userId
        , store_id AS storeId
        , rating
        , reserve_id
        , review_comment AS reviewComment
        , created_at AS createdAt
        , updated_at AS updatedAt
        , LIKE_COUNT AS likeCount <!-- LIKE 컬럼을 LIKE_COUNT로 변경 -->
        FROM review
        WHERE review_id = #{reviewId}
    </select>

    <update id="updateReview" parameterType="Review">
        UPDATE review
        SET rating = #{rating}, review_comment = #{reviewComment}, store_id = #{storeId}
        WHERE review_id = #{reviewId}
    </update>

    <!-- 리뷰 좋아요 삭제 -->
    <delete id="deleteReviewLikes" parameterType="Long">
        DELETE FROM review_like
        WHERE review_id = #{reviewId}
    </delete>

    <!-- 리뷰 삭제 -->
    <delete id="deleteReview" parameterType="Long">
        DELETE FROM review
        WHERE review_id = #{reviewId}
    </delete>

    <!-- REVIEW_FILE_MAP에서 관련 파일 삭제 -->
    <!-- reserveId를 기준으로 파일 삭제 -->
    <delete id="deleteReviewFiles" parameterType="Long">
        DELETE FROM REVIEW_FILE_MAP
        WHERE RESERVE_ID = #{reserveId}
    </delete>

    <select id="getFileIdsByReserveId" parameterType="Long" resultType="Long">
        SELECT FILE_ID
        FROM REVIEW_FILE_MAP
        WHERE RESERVE_ID = #{reserveId}
    </select>

    <!-- 리뷰 좋아요 추가 -->
    <insert id="likeReview" parameterType="map">
        INSERT INTO review_like (review_id, user_id)
        VALUES (#{reviewId}, #{userId})
    </insert>

    <!-- 리뷰 좋아요 취소 -->
    <delete id="unlikeReview" parameterType="map">
        DELETE FROM review_like
        WHERE review_id = #{reviewId} AND user_id = #{userId}
    </delete>

    <!-- 리뷰 좋아요 존재 여부 확인 -->
    <select id="countLikes" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM review_like
        WHERE review_id = #{reviewId} AND user_id = #{userId}
    </select>

    <!-- 좋아요 수 증가 -->
    <update id="incrementLikeCount" parameterType="Long">
        UPDATE review
        SET LIKE_COUNT = LIKE_COUNT + 1 <!-- LIKE 컬럼을 LIKE_COUNT로 변경 -->
        WHERE review_id = #{reviewId}
    </update>

    <!-- 좋아요 수 감소 -->
    <update id="decrementLikeCount" parameterType="Long">
        UPDATE review
        SET LIKE_COUNT = CASE
        WHEN LIKE_COUNT > 0 THEN LIKE_COUNT - 1
        ELSE 0
        END
        WHERE review_id = #{reviewId}
    </update>

    <!-- 새로운 쿼리: username으로 리뷰 목록 조회 -->
    <select id="getReviewsByUsername" parameterType="String" resultType="Review">
        SELECT
        R.review_id AS reviewId,
        R.user_id AS userId,
        R.store_id AS storeId,
        R.rating,
        R.review_comment AS reviewComment,
        R.created_at AS createdAt,
        R.updated_at AS updatedAt,
        R.username,
        R.LIKE_COUNT AS likeCount, <!-- LIKE 컬럼을 LIKE_COUNT로 변경 -->
        S.store_name AS storeName,  <!-- STORE 테이블과 조인하여 store_name 가져오기 -->
        R.RESERVE_ID AS reserveId,
        U.FILE_ID AS fileId
        FROM review R
        LEFT JOIN store S ON R.store_id = S.store_id  <!-- store 테이블과 조인 -->
        LEFT OUTER JOIN USERS U ON U.username = R.username
        WHERE R.username = #{username}
        ORDER BY R.created_at DESC
    </select>

    <select id="checkReserveStatus" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM reserve
        WHERE user_id = #{userId}
        AND store_id = #{storeId}
        AND reserve_status = 2
        AND reserve_id = #{reserveId}
    </select>

    <!-- 특정 사용자의 매장에 대한 중복 리뷰 확인 -->
    <select id="countReviewsByUserAndStore" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM review
        WHERE user_id = #{userId}
        AND store_id = #{storeId}
        AND reserve_id = #{reserveId}
    </select>

    <!-- 예약 ID 자동 조회 -->
    <select id="getReserveId" parameterType="map" resultType="Long">
        SELECT reserve_id
        FROM reserve
        WHERE user_id = #{userId}
        AND store_id = #{storeId}
        AND reserve_status = 2  -- 완료된 예약만
        AND reserve_date =
    </select>

    <!-- 리뷰 개수 조회 -->
    <select id="getReviewCountByStoreId"
            parameterType="Long"
            resultType="Long">
        SELECT COUNT(*)
        FROM REVIEW
        WHERE STORE_ID = #{storeId}
    </select>

    <!-- 리뷰 별점 평균 조회 -->
    <select id="getRatingAvgByStoreId"
            parameterType="Long"
            resultType="double">
        SELECT ROUND(NVL(AVG(RATING), 0), 1) AS AVG_RATING --NULL일 경우 0 반환
        FROM REVIEW
        WHERE STORE_ID = #{storeId}
    </select>

    <!-- 해당 리뷰에 대한 좋아요 삭제(어드민) -->
    <delete id="reviewLikeDeleteForAdmin"
            parameterType="Long">
        DELETE FROM review_like
        WHERE review_id = #{reviewId}
    </delete>

    <!-- 사용자 ID에 해당하는 좋아요 받은 총 갯수를 구하는 쿼리 -->
    <select id="getRankingbyLiked" parameterType="Long" resultType="Long">
        SELECT SUM(LIKE_COUNT) <!-- LIKE 컬럼을 LIKE_COUNT로 변경 -->
        FROM REVIEW
        WHERE user_id = #{userId}
    </select>

    <!-- 해당 사용자의 좋아요 총합을 기준으로 랭킹을 계산하는 쿼리 -->
    <select id="getUserRankingByLikes" parameterType="Long" resultType="Long">
        SELECT COUNT(*) + 1
        FROM (
        SELECT SUM(LIKE_COUNT) AS total_likes <!-- LIKE 컬럼을 LIKE_COUNT로 변경 -->
        FROM REVIEW
        GROUP BY user_id
        ) temp
        WHERE temp.total_likes > #{userLikes}
    </select>

</mapper>
