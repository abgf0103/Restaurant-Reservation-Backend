<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.re.kh.mapper.ReviewMapper">

    <!-- 리뷰 목록 -->
    <select id="selectReview" parameterType="SearchHelper" resultType="Review">
        SELECT
        review_id AS reviewId,
        user_id AS userId,
        store_id AS storeId,
        rating,
        review_comment AS reviewComment,
        created_at AS createdAt,
        updated_at AS updatedAt,
        "LIKE" AS likeCount,
        username  <!-- 추가된 부분: USERNAME -->
        FROM review
        <where>
            <if test="searchCode != null and searchCode != ''">
                AND store_id = #{searchCode}
            </if>
            <if test="searchKeyword != null and searchKeyword != '' and searchType != null and searchType != ''">
                AND ${searchType} LIKE '%' || #{searchKeyword} || '%'
            </if>
        </where>
        ORDER BY review_id DESC
    </select>

    <!-- 리뷰 목록 (사용자별) -->
    <select id="selectReviewsByUserId" parameterType="Long" resultType="Review">
        SELECT
        review_id AS reviewId,
        user_id AS userId,
        store_id AS storeId,
        rating,
        review_comment AS reviewComment,
        created_at AS createdAt,
        updated_at AS updatedAt,
        username
        FROM review
        WHERE user_id = #{userId}
        ORDER BY review_id DESC
    </select>

    <update id="updateReview" parameterType="Review">
        UPDATE review
        SET rating = #{rating}, review_comment = #{reviewComment}, store_id = #{storeId}
        WHERE review_id = #{reviewId}
    </update>




    <!-- 리뷰 목록 카운트 -->
    <select id="countReview" parameterType="SearchHelper" resultType="int">
        SELECT COUNT(*)
        FROM review
        <where>
            <if test="searchCode != null and searchCode != ''">
                AND store_id = #{searchCode}
            </if>
            <if test="searchKeyword != null and searchKeyword != '' and searchType != null and searchType != ''">
                AND ${searchType} LIKE '%' || #{searchKeyword} || '%'
            </if>
        </where>
    </select>

    <!-- 리뷰 저장 -->
    <insert id="reviewSave" parameterType="Review" useGeneratedKeys="true" keyProperty="reviewId" keyColumn="REVIEW_ID">
        INSERT INTO review (user_id, store_id, rating, review_comment, created_at, updated_at, username)
        VALUES (
        #{userId},
        #{storeId},
        #{rating},
        #{reviewComment},
        CURRENT_TIMESTAMP,
        CURRENT_TIMESTAMP,
        #{username} <!-- USERNAME 추가 -->
        )
    </insert>


    <!-- 리뷰 조회 -->
    <select id="reviewInfo" parameterType="Long" resultType="Review">
        SELECT
        review_id AS reviewId
        , user_id AS userId
        , store_id AS storeId
        , rating
        , review_comment AS reviewComment
        , created_at AS createdAt
        , updated_at AS updatedAt
        , "LIKE" AS likeCount
        FROM review
        WHERE review_id = #{reviewId}
    </select>

    <!-- 리뷰 좋아요 삭제 -->
    <delete id="deleteReviewLikes" parameterType="Long">
        DELETE FROM review_like
        WHERE review_id = #{reviewId}
    </delete>

    <!-- 리뷰 삭제 -->
    <delete id="deleteReview" parameterType="Long">
        DELETE FROM review
        WHERE review_id = #{reviewId}
    </delete>


    <!-- 리뷰 좋아요 추가 -->
    <insert id="likeReview" parameterType="map">
        INSERT INTO review_like (review_id, user_id)
        VALUES (#{reviewId}, #{userId})
    </insert>

    <!-- 리뷰 좋아요 취소 -->
    <delete id="unlikeReview" parameterType="map">
        DELETE FROM review_like
        WHERE review_id = #{reviewId} AND user_id = #{userId}
    </delete>

    <!-- 리뷰 좋아요 존재 여부 확인 -->
    <select id="countLikes" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM review_like
        WHERE review_id = #{reviewId} AND user_id = #{userId}
    </select>

    <!-- 좋아요 수 증가 -->
    <update id="incrementLikeCount" parameterType="Long">
        UPDATE review
        SET "LIKE" = "LIKE" + 1
        WHERE review_id = #{reviewId}
    </update>

    <!-- 좋아요 수 감소 -->
    <update id="decrementLikeCount" parameterType="Long">
        UPDATE review
        SET "LIKE" = CASE
        WHEN "LIKE" > 0 THEN "LIKE" - 1
        ELSE 0
        END
        WHERE review_id = #{reviewId}
    </update>

    <!-- 새로운 쿼리: username으로 리뷰 목록 조회 -->
    <select id="getReviewsByUsername" parameterType="String" resultType="Review">
        SELECT
        review_id AS reviewId,
        user_id AS userId,
        store_id AS storeId,
        rating,
        review_comment AS reviewComment,
        created_at AS createdAt,
        updated_at AS updatedAt,
        username
        FROM review
        WHERE username = #{username}
        ORDER BY created_at DESC
    </select>


</mapper>
