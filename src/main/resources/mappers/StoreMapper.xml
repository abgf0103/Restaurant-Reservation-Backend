<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.re.kh.mapper.StoreMapper">

    <!-- 가게 목록 -->
    <select id="selectAllStore" parameterType="SearchHelper" resultType="StoreVO">
        SELECT s.*, uf.file_name
        FROM STORE s
        LEFT  JOIN UPLOAD_FILE uf ON s.FILE_ID = uf.ID
        WHERE s.IS_ACTIVE = 1
        ORDER BY DBMS_RANDOM.VALUE
    </select>

    <!-- 가게 등록 -->
    <insert id="insertStore"
            parameterType="StoreVO">
        INSERT INTO STORE (
            USER_ID,
            STORE_NAME,
            ADDRESS,
            STORE_HOURS,
            PHONE,
            DESCRIPTION,
            IDENTITY,
            FILE_ID,
            GUIDE_LINES
        ) VALUES (
                #{userId} -- 사업자 ID
                , #{storeName} -- 가게 이름
                , #{address} -- 주소
                , #{storeHours} -- 가게 영업 시간
                , #{phone} -- 가게 연락처
                ,#{description}  -- 가게 소개글
                , #{identity}  -- 가게 정체성
                , #{fileId} -- 업로드한 파일 id
                , #{guideLines}   --안내 및 유의사항 여부
        )
    </insert>

    <!-- 가게 수정 -->
    <update id="updateStore"
            parameterType="StoreVO">
        UPDATE STORE
            <set>
                <if test="storeName != null">STORE_NAME = #{storeName}, </if>
                <if test="address != null">ADDRESS = #{address}, </if>
                <if test="storeHours != null">STORE_HOURS = #{storeHours}, </if>
                <if test="storeStatus != null">STORE_STATUS = #{storeStatus}, </if>
                <if test="phone != null">PHONE = #{phone}, </if>
                <if test="description != null">DESCRIPTION = #{description}, </if>
                <if test="identity != null">IDENTITY = #{identity}, </if>
                <if test="fileId != null">FILE_ID = #{fileId}, </if>
                <if test="guideLines != null">GUIDE_LINES = #{guideLines}, </if>
                UPDATED_AT = CURRENT_TIMESTAMP
            </set>
        WHERE STORE_ID = #{storeId}
    </update>


    <!-- 가게 삭제 -->
    <delete id="deleteStore"
            parameterType="Long">
        DELETE FROM STORE
        WHERE STORE_ID = #{storeId}
    </delete>



    <!-- 가게 등록/수정시 가게 이름 체크를 위한 가게 이름 중복 조회(삭제처리된 가게이름은 제외) -->
    <select id="hasStoreName"
            parameterType="String"
            resultType="boolean">
        SELECT COUNT(*)
        FROM STORE
        WHERE STORE_NAME = #{storeName} AND IS_ACTIVE IN (0, 1)
    </select>

    <!-- 가게 이름으로 가게 ID 조회 -->
    <select id="findStoreIdByStoreName"
            parameterType="String"
            resultType="Long">
        SELECT STORE_ID
        FROM STORE
        WHERE STORE_NAME = #{storeName} AND IS_ACTIVE IN (0, 1)
    </select>

    <!-- 가게등록 요청 수락(관리자) -->
    <update id="acceptStoreRegister"
            parameterType="Long">
        UPDATE STORE
        SET IS_ACTIVE = 1   --가게 활성화
        WHERE STORE_ID = #{storeId}
    </update>
    
    <!-- 가게삭제 요청(사업자) -->
    <update id="requestStoreDelete"
            parameterType="Long">
        UPDATE STORE
        SET IS_ACTIVE = 2   --가게 비활성화(삭제요청)
        WHERE STORE_ID = #{storeId}
    </update>

    <!-- 가게삭제 요청 수락(관리자) -->
    <update id="acceptStoreDelete"
            parameterType="Long">
        UPDATE STORE
        SET IS_ACTIVE = 3   --가게 삭제처리
        WHERE STORE_ID = #{storeId}
    </update>



    <!-- 가게를 가게ID로 조회 -->
    <select id="viewStore"
            parameterType="Long"
            resultType="StoreVO">
        SELECT s.*, uf.file_name
        FROM STORE s
        LEFT  JOIN UPLOAD_FILE uf ON S.FILE_ID = uf.ID
        WHERE s.STORE_ID = #{storeId} AND s.IS_ACTIVE = 1
    </select>

    <!-- 내 가게 조회 -->
    <select id="selectMyStoreByUserId"
            parameterType="Long"
            resultType="StoreVO">
        SELECT *
        FROM STORE S
        LEFT  JOIN UPLOAD_FILE uf ON S.FILE_ID = uf.ID
        WHERE S.USER_ID = #{userId}
        AND S.IS_ACTIVE IN (0, 1)
    </select>

    <!--  카테고리로 가게 조회  -->
    <select id="selectStoreByCategoryId"
            parameterType="Long"
            resultType="StoreVO">
        SELECT S.*, UF.FILE_NAME
        FROM STORE S
                 JOIN UPLOAD_FILE UF ON S.FILE_ID = UF.ID
                 JOIN STORE_CATEGORY SC
                      ON S.STORE_ID = SC.STORE_ID
        WHERE SC.CATEGORY_ID = #{cateogryId} AND S.IS_ACTIVE = 1
    </select>


    <!-- 가게 검색 -->
    <select id="searchStore"
            parameterType="String"
            resultType="StoreVO">
        SELECT S.*, UF.FILE_NAME
        FROM STORE S
                 JOIN UPLOAD_FILE UF ON S.FILE_ID = UF.ID
        WHERE STORE_NAME LIKE '%' || #{searchKeyword} || '%'
           OR DESCRIPTION LIKE '%' || #{searchKeyword} || '%'
            OR IDENTITY LIKE '%' || #{searchKeyword} || '%'
        ORDER BY STORE_ID DESC
    </select>

    <!-- 파일 ID로 파일 이름을 가져오기 -->
    <select id="getFileNameByFileId" parameterType="Long" resultType="String">
        SELECT save_file_name
        FROM UPLOAD_FILE
        WHERE id = #{fileId}
    </select>

    <!-- 파일 ID로 파일 타겟 가져오기 -->
    <select id="getFileTargetByFileId" parameterType="Long" resultType="String">
        SELECT FILE_TARGET
        FROM UPLOAD_FILE
        WHERE id = #{fileId}
    </select>

    <!-- 즐겨찾기 한 가게 목록 -->
    <select id="getFavoriteStoreList" parameterType="SearchHelper" resultType="StoreVO">
        SELECT s.*, uf.file_name
        FROM (SELECT *
              FROM STORE
              WHERE STORE_ID IN (SELECT STORE_ID
                                 FROM FAVORITE
                                 WHERE USER_ID = #{userId})) S
                 INNER JOIN UPLOAD_FILE uf ON s.FILE_ID = uf.ID
        WHERE s.IS_ACTIVE = 1
        ORDER BY s.STORE_ID DESC
    </select>

    <!--  모든 가게 조회(어드민)  -->
    <select id="getStoreListForAdmin"
            parameterType="SearchHelper"
            resultType="StoreVO">
        SELECT *
        FROM STORE
        ORDER BY
            CASE
                WHEN IS_ACTIVE IN (0, 2) THEN 0   -- IS_ACTIVE가 0 또는 2일 경우 우선순위 0 (위로)
                WHEN IS_ACTIVE = 3 THEN 2          -- IS_ACTIVE가 3일 경우 우선순위 2 (맨 아래)
                ELSE 1                             -- 나머지 값은 우선순위 1
                END,
            STORE_ID DESC  -- 그 후 STORE_ID 역순으로 정렬
    </select>

</mapper>